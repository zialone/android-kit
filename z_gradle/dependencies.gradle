apply from: "$rootDir/z_gradle/tools.gradle"

def versions = [
        kotlin          : "1.3.72",
        support         : "1.2.0",
        lifecycleVersion: '2.2.0',
        roomVersion     : '2.2.5',
]

def builds = [
        buildToolsVersion: "29.0.3",
        minSdkVersion    : 21,
        compileSdkVersion: 29,
        targetSdkVersion : 29,
]

def google = [
        androidPlugin     : "com.android.tools.build:gradle:4.0.1",
        androidxCore      : "androidx.core:core:${versions.support}",
        appcompat         : "androidx.appcompat:appcompat:${versions.support}",
        recyclerview      : "androidx.recyclerview:recyclerview:${versions.support}",
        constraintLayout  : "androidx.constraintlayout:constraintlayout:1.1.3",

        lifecycleViewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleVersion}",
        lifecycleLivedata : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleVersion}",
        lifecycleRuntime  : "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleVersion}",
        lifecycleCompiler : "androidx.lifecycle:lifecycle-compiler:${versions.lifecycleVersion}",

        coordinatorlayout : "androidx.coordinatorlayout:coordinatorlayout:1.1.0",
        material          : 'com.google.android.material:material:1.0.0',

        startupRuntime    : 'androidx.startup:startup-runtime:1.0.0-alpha02',

        room              : "androidx.room:room-runtime:${versions.roomVersion}",
        roomKtx           : "androidx.room:room-ktx:${versions.roomVersion}",
        roomCompiler      : "androidx.room:room-compiler:${versions.roomVersion}",

        securityCrypto    : "androidx.security:security-crypto:1.0.0-rc03",

        hiltPlguin        : "com.google.dagger:hilt-android-gradle-plugin:2.28-alpha",
        hilt              : "com.google.dagger:hilt-android:2.28-alpha",
        hiltCompiler      : "com.google.dagger:hilt-android-compiler:2.28-alpha"
]

def kotlin = [
        kotlinPlugin   : "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
        reflect        : "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}",
        stdLib         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}",
        androidxKtxCore: "androidx.core:core-ktx:1.3.1",
]

def vendor = [
        glide                   : "com.github.bumptech.glide:glide:4.8.0",
        glideCompiler           : "com.github.bumptech.glide:compiler:4.8.0",

        androidtiffbitmapfactory: "com.github.beyka:androidtiffbitmapfactory:0.9.8.7",

        retrofit                : "com.squareup.retrofit2:retrofit:2.9.0",
        retrofitLogging         : "com.squareup.okhttp3:logging-interceptor:3.9.0",

        xlog                    : "com.tencent.mars:mars-xlog:1.2.4",

        smartRefreshLayout      : 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1',

        photoView               : 'com.github.chrisbanes:PhotoView:2.0.0',

        liveEventBus            : 'com.jeremyliao:live-event-bus:1.5.1',

        x5webview               : "com.tencent.tbs.tbssdk:sdk:43697",

        gson                    : 'com.google.code.gson:gson:2.8.2',

        // TODO 这个版本可以升级，一些优化方法没有release
        wmRouter                : 'com.sankuai.waimai.router:router:1.2.0',
        wmRouterCompiler        : 'com.sankuai.waimai.router:compiler:1.2.0',
        wmRouterPlugin          : 'com.sankuai.waimai.router:plugin:1.2.0',

        leakcanary              : 'com.squareup.leakcanary:leakcanary-android:2.4',

        autosize                : 'me.jessyan:autosize:1.2.1',
]

def test = [
        junit   : "junit:junit:4.12",
        runner  : "androidx.test.ext:junit:1.1.1",
        espresso: "androidx.test.espresso:espresso-core:3.2.0"
]

def libs = google + kotlin + vendor + test

def repositories() {
    return {
        maven { url deps.maven.SNAPSHOT_REPOSITORY_URL }
        maven { url deps.maven.RELEASE_REPOSITORY_URL }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://jitpack.io" }
        google()
        jcenter()
    }
}

def simpleAndroid() {
    return { targetProject ->
        targetProject.android {
            compileSdkVersion deps.builds.compileSdkVersion
            if (targetProject.getPlugins().findPlugin("com.android.application")) {
                buildToolsVersion deps.builds.buildToolsVersion
            }

            defaultConfig {
                minSdkVersion deps.builds.minSdkVersion
                targetSdkVersion deps.builds.targetSdkVersion
                versionCode 1
                versionName depsApp.findVersionNameByModuleName(targetProject.getName()) ?: "1.0.0.0-notfound"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                consumerProguardFiles 'proguard-rules.pro'

                ndk {
                    abiFilters "armeabi-v7a"
                }

                buildConfigField("String", "BUILD_GIT_HASH", "\"${tools.gitHeadHash()}\"")
                buildConfigField("long", "BUILD_TIME", "${tools.buildTime()}L")
            }

            sourceSets {
                main {
                    java {
                        include '**/*.java'
                        include '**/*.kt'
                    }
                }
            }

            compileOptions {
                sourceCompatibility 1.8
                targetCompatibility 1.8
            }

            kotlinOptions { jvmTarget = 1.8 }

            if (targetProject.getPlugins().findPlugin("com.android.library")) {
                // packageBuildConfig(false)
            } else if (targetProject.getPlugins().findPlugin("com.android.application")) {
                //如果存在签名文件，则加入签名文件处理
                File file = new File(targetProject.getProjectDir(), "../z_raw/dev.jks")
                if (file.exists()) {
                    signingConfigs {
                        dev {
                            keyAlias 'key0'
                            keyPassword 'hc@nYz_3'
                            storeFile file
                            storePassword 'hc@nYz_3'
                        }
                    }

                    buildTypes {
                        debug {
                            signingConfig signingConfigs.dev
                        }

                        release {
                            signingConfig signingConfigs.dev

                            // debuggable true
                            minifyEnabled true
                            shrinkResources true
                            zipAlignEnabled true
                        }
                    }
                } else {
                    println("未配置dev keystore，请将dev.jks放置到${file.absolutePath}")
                }
            }
        }
    }
}

def simpleDependencies() {
    return { targetProject, params = [] ->
        params = [includeTest: true] + params

        targetProject.dependencies {
            // libs
            implementation fileTree(dir: "libs", include: ["*.jar"])

            // kotlin
            implementation deps.libs.stdLib
            implementation deps.libs.androidxKtxCore

            // test
            if (params.includeTest) {
                testImplementation deps.libs.junit
                androidTestImplementation deps.libs.runner
                androidTestImplementation deps.libs.espresso
            }
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
def simpleModule() {
    return { targetProject, params = [] ->
        params = [isApplication: false, includeTest: true] + params

        targetProject.apply plugin: params.isApplication ? 'com.android.application' : 'com.android.library'
        targetProject.apply plugin: 'kotlin-android'
        targetProject.apply plugin: 'kotlin-android-extensions'

        deps.gradleConfig.simpleAndroid(targetProject)
        deps.gradleConfig.simpleDependencies(targetProject, [includeTest: params.includeTest])
    }
}

def simpleWHRouter() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (targetProject.getPlugins().findPlugin("com.android.application")) {
            targetProject.apply plugin: 'WMRouter'
        }

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.dependencies {
                kapt deps.libs.wmRouterCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                implementation deps.libs.wmRouter
            }
        }
    }
}

def simpleRoom() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.dependencies {
                kapt deps.libs.roomCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                implementation deps.libs.room
            }
        }
    }
}

def simpleHilt() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.apply plugin: 'dagger.hilt.android.plugin'

            targetProject.dependencies {
                kapt deps.libs.hiltCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                implementation deps.libs.hilt
            }
        }
    }
}

def simpleMavenPublishing() {
    return { targetProject ->
        targetProject.apply from: "$rootDir/z_gradle/maven_publishing.gradle"
    }
}

def gradleConfig = [
        repositories         : repositories(),
        simpleModule         : simpleModule(),
        simpleAndroid        : simpleAndroid(),
        simpleDependencies   : simpleDependencies(),
        simpleWHRouter       : simpleWHRouter(),
        simpleRoom           : simpleRoom(),
        simpleHilt           : simpleHilt(),
        simpleMavenPublishing: simpleMavenPublishing()
]

def maven = [
        SNAPSHOT_REPOSITORY_URL: "$rootDir/repo/snapshot",
        RELEASE_REPOSITORY_URL : "$rootDir/repo/release",
        credentials            : {
            username ''
            password ''
        }
]

ext.deps = [
        builds      : builds,
        libs        : libs,
        gradleConfig: gradleConfig,
        maven       : maven
]