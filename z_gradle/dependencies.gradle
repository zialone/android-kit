apply from: "$rootDir/z_gradle/tools.gradle"

def versions = [
        kotlin          : "1.5.10",
        support         : "1.2.0",
        lifecycleVersion: '2.2.0',
        roomVersion     : '2.3.0',
]

def builds = [
        buildToolsVersion: "30.0.2",
        minSdkVersion    : 21,
        compileSdkVersion: 30,
        targetSdkVersion : 30,
]

def google = [
        androidPlugin     : "com.android.tools.build:gradle:4.2.1",
        androidxCore      : "androidx.core:core:${versions.support}",
        appcompat         : "androidx.appcompat:appcompat:${versions.support}",
        fragment          : "androidx.fragment:fragment:1.3.3",
        fragmentKtx       : "androidx.fragment:fragment-ktx:1.3.3",
        activity          : "androidx.activity:activity:1.2.3",
        activityKtx       : "androidx.activity:activity-ktx:1.2.3",
        recyclerview      : "androidx.recyclerview:recyclerview:1.2.0",
        constraintLayout  : "androidx.constraintlayout:constraintlayout:2.0.4",

        lifecycleViewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleVersion}",
        lifecycleLivedata : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleVersion}",
        lifecycleRuntime  : "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleVersion}",
        lifecycleCompiler : "androidx.lifecycle:lifecycle-compiler:${versions.lifecycleVersion}",
        lifecycleExtension: "androidx.lifecycle:lifecycle-extension:${versions.lifecycleVersion}",

        coordinatorlayout : "androidx.coordinatorlayout:coordinatorlayout:1.1.0",
        material          : "com.google.android.material:material:1.3.0",
        viewpager2        : "androidx.viewpager2:viewpager2:1.0.0",

        startupRuntime    : 'androidx.startup:startup-runtime:1.0.0',

        room              : "androidx.room:room-runtime:${versions.roomVersion}",
        roomKtx           : "androidx.room:room-ktx:${versions.roomVersion}",
        roomCompiler      : "androidx.room:room-compiler:${versions.roomVersion}",

        securityCrypto    : "androidx.security:security-crypto:1.0.0",

        hiltPlguin        : "com.google.dagger:hilt-android-gradle-plugin:2.36",
        hilt              : "com.google.dagger:hilt-android:2.36",
        hiltCompiler      : "com.google.dagger:hilt-android-compiler:2.36"
]

def kotlin = [
        kotlinPlugin   : "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
        coroutines     : "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0",
        reflect        : "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}",
        stdLib         : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
        androidxKtxCore: "androidx.core:core-ktx:1.5.0-rc02",
]

def vendor = [
        glide                   : "com.github.bumptech.glide:glide:4.12.0",
        glideCompiler           : "com.github.bumptech.glide:compiler:4.12.0",

        androidtiffbitmapfactory: "com.github.beyka:androidtiffbitmapfactory:0.9.8.8",

        retrofit                : "com.squareup.retrofit2:retrofit:2.9.0",
        retrofitGson            : "com.squareup.retrofit2:converter-gson:2.9.0",
        retrofitLogging         : { dependencies ->
            dependencies.api("com.squareup.okhttp3:logging-interceptor:4.9.1") {
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
            }
        },

        xlog                    : "com.tencent.mars:mars-xlog:1.2.6",

        smartRefreshLayout      : 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.3',

        photoView               : 'com.github.chrisbanes:PhotoView:2.3.0',

        liveEventBus            : 'com.jeremyliao:live-event-bus:1.7.3',

        x5webview               : "com.tencent.tbs.tbssdk:sdk:43993",

        gson                    : 'com.google.code.gson:gson:2.8.7',

        // TODO 这个版本可以升级，一些优化方法没有release
        wmRouter                : 'com.sankuai.waimai.router:router:1.2.0',
        wmRouterCompiler        : 'com.sankuai.waimai.router:compiler:1.2.0',
        wmRouterPlugin          : 'com.sankuai.waimai.router:plugin:1.2.0',

        leakcanary              : 'com.squareup.leakcanary:leakcanary-android:2.7',

        // 屏幕适配
        autosize                : 'me.jessyan:autosize:1.2.1',

        // js-bridge
        ZJsBridge               : 'com.github.hcanyz:ZJsBridge:1.0.3',
        // recyclerview adapter
        ZAdapter                : 'com.github.hcanyz.ZAdapter:ZAdapter:1.0.3.1',

        zEvVariable             : 'com.github.hcanyz:android-environment-variable:1.0.1.1',
        zEvVariableSetting      : 'com.github.hcanyz.android-environment-variable:environment-variable-setting:1.0.1.1',
        zEvVariableCompiler     : 'com.github.hcanyz.android-environment-variable:compiler:1.0.1.1',

        // 下载管理 - TODO Aria
        okdownload              : 'com.liulishuo.okdownload:okdownload:1.0.7',
        okdownloadSqlite        : 'com.liulishuo.okdownload:sqlite:1.0.7',
        okdownloadOkhttp        : 'com.liulishuo.okdownload:okhttp:1.0.7',
        okdownloadKtx           : 'com.liulishuo.okdownload:ktx:1.0.7',

        // qrCode
        zxingLite               : 'com.king.zxing:zxing-lite:2.0.3',

        viewbindingDelegate     : 'com.kirich1409.viewbindingpropertydelegate:vbpd-noreflection:1.4.1',

        wechatSdk               : 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.7.0',

        androidUtils            : 'com.blankj:utilcodex:1.30.5',

        immersionbar            : 'com.gyf.immersionbar:immersionbar:3.0.0',
        immersionbarKtx         : 'com.gyf.immersionbar:immersionbar-ktx:3.0.0',

        andserver               : 'com.yanzhenjie.andserver:api:2.1.9',
        andserverPlugin         : 'com.yanzhenjie.andserver:plugin:2.1.9',
        andserverProcessor      : 'com.yanzhenjie.andserver:processor:2.1.9'
]

def test = [
        junit   : "junit:junit:4.13.1",
        runner  : "androidx.test.ext:junit:1.1.2",
        espresso: "androidx.test.espresso:espresso-core:3.3.0"
]

def libs = google + kotlin + vendor + test

def repositories() {
    return {
        maven { url deps.maven.SNAPSHOT_REPOSITORY_URL }
        maven { url deps.maven.RELEASE_REPOSITORY_URL }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://jitpack.io" }
        google()
    }
}

def simpleAndroid() {
    return { targetProject ->
        targetProject.android {
            compileSdkVersion deps.builds.compileSdkVersion
            if (targetProject.getPlugins().findPlugin("com.android.application")) {
                buildToolsVersion deps.builds.buildToolsVersion
            }

            defaultConfig {
                minSdkVersion deps.builds.minSdkVersion
                targetSdkVersion deps.builds.targetSdkVersion
                versionCode 1
                versionName depsApp.findVersionNameByModuleName(targetProject.getName()) ?: "1.0.0.0-notfound"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                consumerProguardFiles 'proguard-rules.pro'

                ndk {
                    abiFilters "armeabi-v7a"
                }
            }

            buildTypes {
                debug {
                    buildConfigField("long", "BUILD_TIME", "0L")
                    buildConfigField("String", "BUILD_GIT_HASH", "\"~\"")
                }

                release {
                    buildConfigField("long", "BUILD_TIME", "${tools.buildTime()}L")
                    buildConfigField("String", "BUILD_GIT_HASH", "\"${tools.gitHeadHash()}\"")
                }
            }

            sourceSets {
                main {
                    java {
                        include '**/*.java'
                        include '**/*.kt'
                    }
                }
            }

            compileOptions {
                sourceCompatibility 1.8
                targetCompatibility 1.8
            }

            kotlinOptions { jvmTarget = 1.8 }

            buildFeatures {
                viewBinding = true
            }

            if (targetProject.getPlugins().findPlugin("com.android.library")) {
                // packageBuildConfig(false)
            } else if (targetProject.getPlugins().findPlugin("com.android.application")) {
                //如果存在签名文件，则加入签名文件处理
                File file = new File(targetProject.getProjectDir(), "../z_raw/dev.jks")
                if (file.exists()) {
                    signingConfigs {
                        dev {
                            keyAlias 'key0'
                            keyPassword 'hc@nYz_3'
                            storeFile file
                            storePassword 'hc@nYz_3'
                        }
                    }

                    buildTypes {
                        debug {
                            signingConfig signingConfigs.dev
                        }

                        release {
                            signingConfig signingConfigs.dev

                            // debuggable true
                            minifyEnabled true
                            shrinkResources true
                            zipAlignEnabled true
                        }
                    }
                } else {
                    println("未配置dev keystore，请将dev.jks放置到${file.absolutePath}")
                }
            }
        }
    }
}

def simpleDependencies() {
    return { targetProject, params = [] ->
        params = [includeTest: true] + params

        targetProject.dependencies {
            // libs
            implementation fileTree(dir: "libs", include: ["*.jar"])

            // kotlin
            implementation deps.libs.stdLib
            implementation deps.libs.coroutines
            implementation deps.libs.androidxKtxCore

            // test
            if (params.includeTest) {
                testImplementation deps.libs.junit
                androidTestImplementation deps.libs.runner
                androidTestImplementation deps.libs.espresso
            }
        }
    }
}

def simpleUIDependencies() {
    return { targetProject, params = [] ->
        params = [includeViewWidget: true] + params

        targetProject.dependencies {
            // kotlin
            implementation deps.libs.activity
            implementation deps.libs.activityKtx
            implementation deps.libs.fragment
            implementation deps.libs.fragmentKtx
            implementation deps.libs.appcompat
            implementation deps.libs.lifecycleViewmodel

            if (params.includeViewWidget) {
                // widget

                implementation deps.libs.constraintLayout
                implementation deps.libs.material
            }
        }
    }
}

def simpleDownloadDependencies() {
    return { targetProject, params = [] ->
        params = [compileOnly: false] + params

        targetProject.dependencies {
            // okDownload
            if (params.compileOnly) {
                compileOnly deps.libs.okdownload
                compileOnly deps.libs.okdownloadSqlite
                compileOnly deps.libs.okdownloadOkhttp
                compileOnly deps.libs.okdownloadKtx
            } else {
                implementation deps.libs.okdownload
                implementation deps.libs.okdownloadSqlite
                implementation deps.libs.okdownloadOkhttp
                implementation deps.libs.okdownloadKtx
            }
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
def simpleModule() {
    return { targetProject, params = [] ->
        params = [isApplication: false, includeTest: true, includeKotlinParcelize: false] + params

        targetProject.apply plugin: params.isApplication ? 'com.android.application' : 'com.android.library'
        targetProject.apply plugin: 'kotlin-android'
        if (params.includeKotlinParcelize) {
            targetProject.apply plugin: 'kotlin-parcelize'
        }

        deps.gradleConfig.simpleAndroid(targetProject)
        deps.gradleConfig.simpleDependencies(targetProject, [includeTest: params.includeTest])
    }
}

def simpleWHRouter() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (targetProject.getPlugins().findPlugin("com.android.application")) {
            targetProject.apply plugin: 'WMRouter'
        }

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.dependencies {
                kapt deps.libs.wmRouterCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                implementation deps.libs.wmRouter
            }
        }
    }
}

def simpleRoom() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.dependencies {
                kapt deps.libs.roomCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                api deps.libs.room
            }
        }
    }
}

def simpleHilt() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.apply plugin: 'dagger.hilt.android.plugin'

            targetProject.dependencies {
                kapt deps.libs.hiltCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                implementation deps.libs.hilt
            }
        }
    }
}

def simpleEvVariable() {
    return { targetProject, params = [] ->
        params = [includeCompiler: true, includeLib: true] + params

        if (params.includeCompiler) {
            if (!targetProject.getPlugins().findPlugin("kotlin-kapt")) {
                targetProject.apply plugin: 'kotlin-kapt'
            }

            targetProject.dependencies {
                kapt deps.libs.zEvVariableCompiler
            }
        }

        if (params.includeLib) {
            targetProject.dependencies {
                api deps.libs.zEvVariableSetting
            }
        }
    }
}

def simpleMavenPublishing() {
    return { targetProject ->
        targetProject.apply from: "$rootDir/z_gradle/maven_publishing.gradle"
    }
}

def gradleConfig = [
        repositories              : repositories(),
        simpleModule              : simpleModule(),
        simpleAndroid             : simpleAndroid(),
        simpleDependencies        : simpleDependencies(),
        simpleUIDependencies      : simpleUIDependencies(),
        simpleDownloadDependencies: simpleDownloadDependencies(),
        simpleWHRouter            : simpleWHRouter(),
        simpleRoom                : simpleRoom(),
        simpleHilt                : simpleHilt(),
        simpleEvVariable          : simpleEvVariable(),
        simpleMavenPublishing     : simpleMavenPublishing()
]

def maven = [
        SNAPSHOT_REPOSITORY_URL: "$rootDir/repo/snapshot",
        RELEASE_REPOSITORY_URL : "$rootDir/repo/release",
        credentials            : {
            username ''
            password ''
        }
]

ext.deps = [
        builds      : builds,
        libs        : libs,
        gradleConfig: gradleConfig,
        maven       : maven
]