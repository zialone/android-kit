apply from: "$rootDir/z_gradle/tools.gradle"

class I {
    static def defaultGroupId = "com.hcanyz.android_kit"

    static int ver_v = 1
    static int ver_r = 0
    static int ver_s = 0
    static int ver_increment = 0
    //V1R00S00In00 1000000
    static def appVersionCode = (((ver_v * 100 + ver_r) * 100 + ver_s) * 100 + ver_increment)
    //1.00.00.00
    static def appVersionName = String.format("%s.%d.%d.%d-SNAPSHOT", ver_v, ver_r, ver_s, ver_increment)
}

static def m(String featureName, String version = I.appVersionName, String groupId = I.defaultGroupId) {
    if (version.isEmpty()) {
        return "$groupId:$featureName"
    }
    return "$groupId:$featureName:$version"
}

def vendor = [
        vendor_log   : m("vendor_log", "1.0.0.0-SNAPSHOT"),
        vendor_config: m("vendor_config", "1.0.0.0-SNAPSHOT"),
]
def widget = [
        widget_core           : m("widget_core", "1.0.0.0-SNAPSHOT"),
        widget_di             : m("widget_di", "1.0.0.0-SNAPSHOT"),
        widget_http           : m("widget_http", "1.0.0.0-SNAPSHOT"),
        widget_res            : m("widget_res", "1.0.0.0-SNAPSHOT"),
        widget_storage        : m("widget_storage", "1.0.0.0-SNAPSHOT"),
        widget_webview        : m("widget_webview", "1.0.0.0-SNAPSHOT"),
        widget_views_stateview: m("widget_views_stateview", "1.0.0.0-SNAPSHOT"),
]
def feature = ([
        defaultGroupId: I.defaultGroupId,
        appVersionCode: I.appVersionCode,
        appVersionName: I.appVersionName,
]
        + featureM("template", ["base"])
)

def dynamicIncludeImpl() {
    return { aware, gradle, settings ->
        aware.apply from: "z_gradle/dynamic_include_module.gradle"

        tools.invalidChangingModuleCache(gradle)

        def globalMode = "module2project"
        dynamic.dynamicInclude(gradle, settings,
                featureDynamic("template", ["base"], globalMode ?: "module")
                        + otherM("vendor", "log", globalMode ?: "module")
                        + otherM("vendor", "config", globalMode ?: "module")

                        + otherM("widget", "core", globalMode ?: "module")
                        + otherM("widget", "di", globalMode ?: "module")
                        + otherM("widget", "http", globalMode ?: "module")
                        + otherM("widget", "res", globalMode ?: "module")
                        + otherM("widget", "storage", globalMode ?: "module")
                        + otherM("widget", "webview", globalMode ?: "module")
                        + otherM("widget", "views_stateview", globalMode ?: "module")
        )
    }
}


/**
 * 创建feature_*及子模块
 * 同时会创建一个 maven pushing task，可以同时执行[featureName]下所有Module的publish
 * gradlew publishMavenFeature*All
 * @param featureName name
 * @param privateModuleNames 私有p工程
 * @param mode dynamic mode
 */
def featureDynamic(String featureName, List<String> privateModuleNames, String mode) {
    def allPushTaskDependsOn = []

    def main = [[module   : m("feature_$featureName", ""), project: ":feature_$featureName",
                 localPath: "feature_$featureName/p_main", mode: mode]]
    allPushTaskDependsOn.add(":feature_$featureName:publish")

    def privateModule = []
    privateModuleNames.forEach { name ->
        privateModule.add([module   : m("i_feature_${featureName}_$name", ""), project: ":i_feature_${featureName}_${name}",
                           localPath: "feature_${featureName}/p_$name", mode: mode])

        allPushTaskDependsOn.add(":i_feature_${featureName}_$name:publish")
    }

    def api = [[module   : m("feature_${featureName}_api", ""), project: ":feature_${featureName}_api",
                localPath: "feature_${featureName}/api", mode: mode]]

    allPushTaskDependsOn.add(":feature_${featureName}_api:publish")

    gradle.projectsEvaluated {
        def allPushTask = gradle.rootProject.tasks.create("publishMavenFeature${featureName.capitalize()}All")
        allPushTaskDependsOn.forEach {
            allPushTask.dependsOn(it)
        }
    }
    return main + privateModule + api
}

static def featureM(String featureName, List<String> privateModuleNames) {
    def main = [("feature_" + featureName): m("feature_$featureName")]
    def privateModule = [:]
    privateModuleNames.forEach { name ->
        privateModule.put("i_feature_" + "${featureName}_${name}", m("i_feature_${featureName}_${name}"))
    }
    def api = [("feature_" + featureName + "_api"): m("feature_${featureName}_api")]
    return main + privateModule + api
}

static def otherM(String type, String name, String mode) {
    return [module   : m("${type}_$name", ""), project: ":${type}_$name",
            localPath: "${type}s/${type}_$name", mode: mode]
}

def findVersionNameByModuleName(all) {
    return { String moduleName ->
        String moduleStr = all.get(moduleName)
        if (moduleStr == null) {
            getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
            return null
        }
        String[] moduleSplit = moduleStr.split(":")
        // group:artifact:version
        if (moduleSplit && moduleSplit.length == 3) {
            getLogger().log(LogLevel.LIFECYCLE, "findVersionName:moduleName:${moduleName},finded:${moduleSplit[2]}")
            return moduleSplit[2]
        }
        getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
        return null
    }
}

static def excludeSomeDependencies() {
    return { gradle ->
        gradle.allprojects { prj ->
            prj.configurations.all(new Action<Configuration>() {
                @Override
                void execute(Configuration config) {
                    // config.all*.exclude(group: 'androidx.viewpager', module: 'viewpager')
                }
            })
        }
    }
}

def tool = [
        dynamicIncludeImpl         : dynamicIncludeImpl(),
        findVersionNameByModuleName: findVersionNameByModuleName(feature + vendor + widget),
        excludeSomeDependencies    : excludeSomeDependencies(),
]

def all = feature + vendor + widget + tool

ext.depsApp = all