apply from: "$rootDir/z_gradle/tools.gradle"

class I {
    static def defaultGroupId = "com.hcanyz.android_kit"

    static int ver_v = 1
    static int ver_r = 0
    static int ver_s = 0
    static int ver_increment = 0
    //V1R00S00In00 1000000
    static def appVersionCode = (((ver_v * 100 + ver_r) * 100 + ver_s) * 100 + ver_increment)
    //1.00.00.00
    static def appVersionName = String.format("%s.%d.%d.%d", ver_v, ver_r, ver_s, ver_increment)
}

static def m(featureName, version = I.appVersionName, groupId = I.defaultGroupId) {
    if (version.isEmpty()) {
        return "$groupId:$featureName"
    }
    return "$groupId:$featureName:$version"
}

def feature = [
        defaultGroupId         : I.defaultGroupId,
        appVersionCode         : I.appVersionCode,
        appVersionName         : I.appVersionName,
        feature_template       : m("feature_template"),
        i_feature_template_base: m("i_feature_template_base"),
        feature_template_api   : m("feature_template_api"),
]
def vendor = [
        vendor_log   : m("vendor_log", "1.0.0.0-SNAPSHOT"),
        vendor_config: m("vendor_config", "1.0.0.0-SNAPSHOT"),
]
def widget = [
        widget_core   : m("widget_core", "1.0.0.0-SNAPSHOT"),
        widget_di     : m("widget_di", "1.0.0.0-SNAPSHOT"),
        widget_http   : m("widget_http", "1.0.0.0-SNAPSHOT"),
        widget_res    : m("widget_res", "1.0.0.0-SNAPSHOT"),
        widget_storage: m("widget_storage", "1.0.0.0-SNAPSHOT"),
]

def dynamicIncludeImpl() {
    return { aware, gradle, settings ->
        aware.apply from: "z_gradle/dynamic_include_module.gradle"

        def globalMode = "module2project"
        tools.invalidChangingModuleCache(gradle)
        dynamic.dynamicInclude(gradle, settings, [
                [module   : m("feature_template", ""), project: ":feature_template",
                 localPath: "feature_template/p_main", mode: globalMode ?: "module"],
                [module   : m("i_feature_template_base", ""), project: ":i_feature_template_base",
                 localPath: "feature_template/p_base", mode: globalMode ?: "module"],
                [module   : m("feature_template_api", ""), project: ":feature_template_api",
                 localPath: "feature_template/api", mode: globalMode ?: "module"],

                [module   : m("vendor_log", ""), project: ":vendor_log",
                 localPath: "vendors/vendor_log", mode: globalMode ?: "module"],
                [module   : m("vendor_config", ""), project: ":vendor_config",
                 localPath: "vendors/vendor_config", mode: globalMode ?: "module"],

                [module   : m("widget_core", ""), project: ":widget_core",
                 localPath: "widgets/widget_core", mode: globalMode ?: "module"],
                [module   : m("widget_di", ""), project: ":widget_di",
                 localPath: "widgets/widget_di", mode: globalMode ?: "module"],
                [module   : m("widget_http", ""), project: ":widget_http",
                 localPath: "widgets/widget_http", mode: globalMode ?: "module"],
                [module   : m("widget_res", ""), project: ":widget_res",
                 localPath: "widgets/widget_res", mode: globalMode ?: "module"],
                [module   : m("widget_storage", ""), project: ":widget_storage",
                 localPath: "widgets/widget_storage", mode: globalMode ?: "module"],
        ])
    }
}

def findVersionNameByModuleName(all) {
    return { String moduleName ->
        String moduleStr = all.get(moduleName)
        if (moduleStr == null) {
            getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
            return null
        }
        String[] moduleSplit = moduleStr.split(":")
        // group:artifact:version
        if (moduleSplit && moduleSplit.length == 3) {
            getLogger().log(LogLevel.LIFECYCLE, "findVersionName:moduleName:${moduleName},finded:${moduleSplit[2]}")
            return moduleSplit[2]
        }
        getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
        return null
    }
}

static def excludeSomeDependencies() {
    return { gradle ->
        gradle.allprojects { prj ->
            prj.configurations.all(new Action<Configuration>() {
                @Override
                void execute(Configuration config) {
                    // config.all*.exclude(group: 'androidx.viewpager', module: 'viewpager')
                }
            })
        }
    }
}

def tool = [
        dynamicIncludeImpl         : dynamicIncludeImpl(),
        findVersionNameByModuleName: findVersionNameByModuleName(feature + vendor + widget),
        excludeSomeDependencies    : excludeSomeDependencies(),
]

def all = feature + vendor + widget + tool

ext.depsApp = all