apply from: "$rootDir/z_gradle/tools.gradle"

def defaultGroupId = "com.hcanyz.android_kit"

static def featureVersion(feature, version = "1.0.0.0-SNAPSHOT") {
    return "$feature:$version"
}

def feature = [
        feature_template       : featureVersion("$defaultGroupId:feature_template"),
        i_feature_template_base: featureVersion("$defaultGroupId:i_feature_template_base"),
        feature_template_api   : featureVersion("$defaultGroupId:feature_template_api"),
]
def vendor = [
        vendor_log   : "$defaultGroupId:vendor_log:1.0.0.0-SNAPSHOT",
        vendor_config: "$defaultGroupId:vendor_config:1.0.0.0-SNAPSHOT",
]
def widget = [
        widget_res    : "$defaultGroupId:widget_res:1.0.0.0-SNAPSHOT",
        widget_storage: "$defaultGroupId:widget_storage:1.0.0.0-SNAPSHOT",
]

def dynamicIncludeImpl(defaultGroupId) {
    return { aware, gradle, settings ->
        aware.apply from: "z_gradle/dynamic_include_module.gradle"

        def globalMode = "module2project"
        tools.invalidChangingModuleCache(gradle)
        dynamic.dynamicInclude(gradle, settings, [
                [module   : "$defaultGroupId:feature_template", project: ":feature_template",
                 localPath: "feature_template/p_main", mode: globalMode ?: "module"],
                [module   : "$defaultGroupId:i_feature_template_base", project: ":i_feature_template_base",
                 localPath: "feature_template/p_base", mode: globalMode ?: "module"],
                [module   : "$defaultGroupId:feature_template_api", project: ":feature_template_api",
                 localPath: "feature_template/api", mode: globalMode ?: "module"],

                [module   : "$defaultGroupId:vendor_log", project: ":vendor_log",
                 localPath: "vendors/vendor_log", mode: globalMode ?: "module"],
                [module   : "$defaultGroupId:vendor_config", project: ":vendor_config",
                 localPath: "vendors/vendor_config", mode: globalMode ?: "module"],

                [module   : "$defaultGroupId:widget_res", project: ":widget_res",
                 localPath: "widgets/widget_res", mode: globalMode ?: "module"],
                [module   : "$defaultGroupId:widget_storage", project: ":widget_storage",
                 localPath: "widgets/widget_storage", mode: globalMode ?: "module"],
        ])
    }
}

def findVersionNameByModuleName(feature, vendor, widget) {
    return { String moduleName ->
        String moduleStr = (feature + vendor + widget).get(moduleName)
        if (moduleStr == null) {
            getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
            return null
        }
        String[] moduleSplit = moduleStr.split(":")
        // group:artifact:version
        if (moduleSplit && moduleSplit.length == 3) {
            getLogger().log(LogLevel.LIFECYCLE, "findVersionName:moduleName:${moduleName},finded:${moduleSplit[2]}")
            return moduleSplit[2]
        }
        getLogger().log(LogLevel.WARN, "findVersionName:moduleName:${moduleName},not found,maybe error")
        return null
    }
}

def tool = [
        findVersionNameByModuleName: findVersionNameByModuleName(feature, vendor, widget),
        dynamicIncludeImpl         : dynamicIncludeImpl(defaultGroupId)
]

def all = feature + vendor + widget + tool

ext.depsApp = all